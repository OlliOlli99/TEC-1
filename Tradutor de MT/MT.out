;DI translator setup
0 0 _ r move0
0 1 _ r move1

move0 0 * r move0
move0 1 0 r move1
move0 _ 0 r wall&

move1 1 * r move1
move1 0 1 r move0
move1 _ 1 r wall&

wall& _ & l wall#

wall# * * l wall#
wall# _ # r 0o

;translator transitions:
;right movement transitions state 1
&1 * * * 1
&1 _ * * 1
&1 & _ r &1-moveB
&1-moveB _ & l 1

;right movement transitions state 4
&4 * * * 4
&4 _ * * 4
&4 & _ r &4-moveB
&4-moveB _ & l 4

;right movement transitions state 3
&3 * * * 3
&3 _ * * 3
&3 & _ r &3-moveB
&3-moveB _ & l 3

;right movement transitions state 7
&7 * * * 7
&7 _ * * 7
&7 & _ r &7-moveB
&7-moveB _ & l 7

;left movement transitions state 2
#2 * * * 2
#2 # * r #2-0
#2-0 0 _ r #2-move0
#2-0 1 _ r #2-move1
#2-0 _ _ r #2-moveB
;new move0 state 2
#2-move0 0 * r #2-move0
#2-move0 1 0 r #2-move1
#2-move0 _ 0 r #2-moveB
#2-move0 & 0 r #2-wall&
;new move1 state 2
#2-move1 1 * r #2-move1
#2-move1 0 1 r #2-move0
#2-move1 _ 1 r #2-moveB
#2-move1 & 1 r #2-wall&
;new moveB state 2
#2-moveB _ * r #2-moveB
#2-moveB 0 _ r #2-move0
#2-moveB 1 _ r #2-move1
#2-moveB & _ r #2-wall&
;new wall& state 2
#2-wall& _ & l #2-wall#
;new wall# state 2
#2-wall# * * l #2-wall#
#2-wall# _ * * 2

;left movement transitions state 6
#6 * * * 6
#6 # * r #6-0
#6-0 0 _ r #6-move0
#6-0 1 _ r #6-move1
#6-0 _ _ r #6-moveB
;new move0 state 6
#6-move0 0 * r #6-move0
#6-move0 1 0 r #6-move1
#6-move0 _ 0 r #6-moveB
#6-move0 & 0 r #6-wall&
;new move1 state 6
#6-move1 1 * r #6-move1
#6-move1 0 1 r #6-move0
#6-move1 _ 1 r #6-moveB
#6-move1 & 1 r #6-wall&
;new moveB state 6
#6-moveB _ * r #6-moveB
#6-moveB 0 _ r #6-move0
#6-moveB 1 _ r #6-move1
#6-moveB & _ r #6-wall&
;new wall& state 6
#6-wall& _ & l #6-wall#
;new wall# state 6
#6-wall# * * l #6-wall#
#6-wall# _ * * 6

;left movement transitions state 5
#5 * * * 5
#5 # * r #5-0
#5-0 0 _ r #5-move0
#5-0 1 _ r #5-move1
#5-0 _ _ r #5-moveB
;new move0 state 5
#5-move0 0 * r #5-move0
#5-move0 1 0 r #5-move1
#5-move0 _ 0 r #5-moveB
#5-move0 & 0 r #5-wall&
;new move1 state 5
#5-move1 1 * r #5-move1
#5-move1 0 1 r #5-move0
#5-move1 _ 1 r #5-moveB
#5-move1 & 1 r #5-wall&
;new moveB state 5
#5-moveB _ * r #5-moveB
#5-moveB 0 _ r #5-move0
#5-moveB 1 _ r #5-move1
#5-moveB & _ r #5-wall&
;new wall& state 5
#5-wall& _ & l #5-wall#
;new wall# state 5
#5-wall# * * l #5-wall#
#5-wall# _ * * 5

;modified DI:
;S
;MT1
;Máquina que compute a função f:N->N onde a entrada é a representação binária do número natural.
;f(n)	= 2n caso n seja par
;	  n+1 caso n seja ímpar

; ESTADO INICIAL ---> 0

;marca 1o. símbolo
0o _ _ r halt
0o 0 Z r &1
0o 1 U r &1
;percorre até final da fita
1 0 0 r &1
1 1 1 r &1
1 _ _ l #2
;verifica símbolo mais à direita da entrada
2 0 0 r &4
2 1 0 l #6
2 Z 0 l halt-accept
2 U 1 r &3
;entrada igual a 1
3 _ 0 l halt-accept
;entrada é par: multiplicação por dois
4 _ 0 l #5
5 0 0 l #5
5 1 1 l #5
5 Z 0 l halt-accept
5 U 1 l halt-accept
;entrada é ímpar: muda 1 por 0 até encontrar o 0 mais à direita, que vira 1
6 1 0 l #6
6 0 1 l #5
6 Z 1 l halt-accept
6 U 1 r &7
;caso a entrada seja composta apenas de 1s sucessivos
7 0 0 r &7
7 _ 0 r halt-accept

10 0 0 r 10
10 _ 0 r halt-accept
